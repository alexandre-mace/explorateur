{"version":3,"file":"static/js/182.44591338.chunk.js","mappings":"yjzqJAGAA,EAAAA,eAAyBC,EAAQ,OACjCD,EAAAA,eAAyBC,EAAQ,MAEjC,IAqDA,EArDuB,SAACC,EAASC,GAC7B,IAAMC,EAAQC,OAAOC,KAAKC,EAAAA,IAASC,QAAO,SAAAC,GAAK,OAAKC,MAAMD,MACtDE,EAAiBC,MAAMC,KACvB,IAAIC,IACCP,EAAAA,QACW,SAAAE,GAAK,MAA4E,qBAAjET,EAAAA,QAAkBS,EAAMM,QAAS,KAAM,CAACC,OAAQ,gBACvEC,KAAI,SAAAR,GAAK,OAAIT,EAAAA,QAAkBS,EAAMM,QAAS,KAAM,CAACC,OAAQ,kBAM1E,GAFAL,EAAeO,QAAQ,SAEnBhB,GAAWC,EAAM,CACjB,IAAMgB,EAAYZ,EAAAA,QAAY,SAAAE,GAAK,OAE1BT,EAAAA,QAAkBS,EAAMM,QAAS,KAAM,CAACC,OAAQ,eAAiBd,GACrD,UAAZA,GAAyC,UAAlBO,EAAMM,UAEpB,YAAdN,EAAMW,MACL,CAAC,uBAAwB,uBAAwB,UAAUC,SAASZ,EAAMa,WAC7EL,KAAI,SAAAR,GAAK,MAAK,CACXc,MAAMC,EAAAA,EAAAA,GAAaf,EAAMa,QACzBG,EAAGhB,EAAMN,EAAKuB,gBAGnB,MAAO,CACH1B,UAAWW,EACXP,MAAOA,EAAMuB,UACbpB,KAAMY,GAId,GAAIjB,EAAS,CACT,IAAMiB,EAAYZ,EAAAA,QAAY,SAAAE,GAAK,OAE1BT,EAAAA,QAAkBS,EAAMM,QAAS,KAAM,CAACC,OAAQ,eAAiBd,GACrD,UAAZA,GAAyC,UAAlBO,EAAMM,UAEpB,YAAdN,EAAMW,MACL,CAAC,uBAAwB,uBAAwB,UAAUC,SAASZ,EAAMa,WAC7EL,KAAI,SAAAR,GAAK,MAAK,CACZc,MAAMC,EAAAA,EAAAA,GAAaf,EAAMa,QACzBf,KAAMF,OAAOC,KAAKG,GAAOD,QAAO,SAAAoB,GAAG,OAAKlB,MAAMkB,MAAMX,KAAI,SAAAW,GAAG,OAAInB,EAAMmB,UAGzE,MAAO,CACH5B,UAAWW,EACXP,MAAOA,EAAMuB,UACbpB,KAAMY,K,4GCpClBU,GAAAA,CAAYC,KACZC,GAAAA,CAAaD,KAEb,IA0GA,EA1G6B,SAACE,GAC1B,MAA8BC,EAAAA,SAAe,MAAK,eAA3CC,EAAO,KAAEC,EAAU,KAC1B,EAAwBF,EAAAA,SAAe,QAAO,eAAvC9B,EAAI,KAAEiC,EAAO,KACpB,EAA8BH,EAAAA,SAAe,SAAQ,eAA9C/B,EAAO,KAAEmC,EAAU,KAC1B,EAA0BJ,EAAAA,SAAe,QAAO,eAAzCK,EAAK,KAAEC,EAAQ,KACfC,GAASC,EAAAA,EAAAA,KAATD,MAUP,OARAP,EAAAA,iBAAsB,WAClBE,EAAWO,EAAexC,EAASC,MACpC,IAEH8B,EAAAA,WAAgB,WACZE,EAAWO,EAAexC,EAAoB,QAAVoC,EAAkB,KAAOnC,MAC9D,CAACA,EAAMD,EAASoC,KAGf,gCACiB,OAAZJ,IACG,SAACS,EAAA,EAAW,IAGH,OAAZT,IACG,iCACI,iBAAKU,UAAU,wCAAuC,WAClD,iBAAKA,UAAU,kCAAiC,WAC5C,SAACC,EAAA,EAAW,CAACC,GAAI,CAAEC,SAAU,IAAKC,SAAU,IAAKC,YAAa,EAAGC,aAAc,GAAI,UAC/E,SAACC,EAAA,EAAY,CACTC,kBAAgB,EAChBC,eAAa,EACbC,GAAG,cACHC,QAASrB,EAAQlC,UACjBwD,MAAO,UACPC,MAAOvD,EACPwD,SAAU,SAACC,EAAOF,GAAK,OAAKG,EAAAA,EAAAA,GAAoBH,EAAOpB,IACvDS,GAAI,CAAEN,MAAO,KACbqB,YAAa,SAACC,GAAM,OAAK,SAACC,EAAA,GAAS,kBAAKD,GAAM,IAAEE,MAAO,eAGpD,SAAV1B,IACG,SAACO,EAAA,EAAW,CAACC,GAAI,CAAEC,SAAU,IAAKC,SAAU,IAAKiB,WAAY,CACzDC,GAAI,EACJC,GAAI,IACJ,UACA,SAAChB,EAAA,EAAY,CACTC,kBAAgB,EAChBC,eAAa,EACbC,GAAG,WACHC,QAASrB,EAAQ9B,MACjBqD,MAAOtD,EACPuD,SAAU,SAACD,GAAK,OAAKW,EAAAA,EAAAA,GAAiBX,EAAOrB,IAC7CU,GAAI,CAAEN,MAAO,KACbqB,YAAa,SAACC,GAAM,OAAK,SAACC,EAAA,GAAS,kBAAKD,GAAM,IAAEE,MAAO,uBAKvE,gBAAKpB,UAAU,WAAU,UACrB,SAACyB,EAAA,EAAU,CAAC/B,MAAOA,EAAOC,SAAUA,EAAU+B,WAAY,CAAC,MAAO,gBAI1E,gBAAK1B,UAAU,MAAK,UAChB,iBAAKA,UAAU,WAAU,UACV,QAAVN,IACG,SAAC,KAAe,QACZiC,WAAYzC,IACZyB,SAAO,mBAAOiB,EAAAA,EAAAA,IAAWlC,EAAOE,IAAY,CAACiC,OAAQ,CAAC,CAC1CC,KAAMpC,EACN/B,KAAM2B,EAAQ3B,UAEtByB,IAGD,SAAVM,IACG,SAAC,KAAe,QACZiC,WAAYzC,IACZyB,SAAO,2BACCiB,EAAAA,EAAAA,IAAWlC,EAAOE,IACnB,CACCmC,MAAO,CACHC,YAAY,OAAI1C,EAAQ9B,OAAOuB,UAC/BkD,kBAAmB,KACnBC,MAAO,CACHC,SAAS,IAGjBC,MAAO,CACHF,MAAO,CACHG,KAAM,cAIf,CAACR,OAAQvC,EAAQ3B,KAAK2E,KAAKC,EAAAA,MAC9BnD,UAKpB,SAACoD,EAAA,EAAU,CAACN,MAAO,6CACnB,SAACO,EAAA,EAAY,CAACC,YAAa,OAAQC,YAAa","sources":["data/adapter/getGhgBySector.js","components/charts/GhgEmissionsBySector.js"],"sourcesContent":["import data from \"../dataset/historical_emissions.json\";\r\nimport countries from \"i18n-iso-countries\";\r\nimport formatLabels from \"../../utils/formatLabels\";\r\ncountries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\r\ncountries.registerLocale(require(\"i18n-iso-countries/langs/fr.json\"));\r\n\r\nconst getGhgBySector = (country, year) => {\r\n    const years = Object.keys(data[0]).filter(datum => !isNaN(datum))\r\n    let chartCountries = Array.from(\r\n        new Set(\r\n            (data\r\n                .filter(datum => typeof countries.getName(datum.Country, \"fr\", {select: \"official\"}) !== 'undefined')\r\n                .map(datum => countries.getName(datum.Country, \"fr\", {select: \"official\"}))\r\n            )\r\n        )\r\n    )\r\n    chartCountries.unshift('Monde')\r\n\r\n    if (country && year) {\r\n        const chartData = data.filter(datum =>\r\n            (\r\n                (countries.getName(datum.Country, \"fr\", {select: \"official\"}) === country) ||\r\n                (country === 'Monde' && datum.Country === 'WORLD')\r\n            ) &&\r\n            datum.Gas === \"All GHG\" &&\r\n            ![\"Total including LUCF\", \"Total excluding LUCF\", \"Energy\"].includes(datum.Sector)\r\n        ).map(datum => ({\r\n             name: formatLabels(datum.Sector),\r\n             y: datum[year.toString()]\r\n        }))\r\n\r\n        return {\r\n            countries: chartCountries,\r\n            years: years.reverse(),\r\n            data: chartData\r\n        }\r\n    }\r\n\r\n    if (country) {\r\n        const chartData = data.filter(datum =>\r\n            (\r\n                (countries.getName(datum.Country, \"fr\", {select: \"official\"}) === country) ||\r\n                (country === 'Monde' && datum.Country === 'WORLD')\r\n            ) &&\r\n            datum.Gas === \"All GHG\" &&\r\n            ![\"Total including LUCF\", \"Total excluding LUCF\", \"Energy\"].includes(datum.Sector)\r\n        ).map(datum => ({\r\n            name: formatLabels(datum.Sector),\r\n            data: Object.keys(datum).filter(key => !isNaN(key)).map(key => datum[key])\r\n        }))\r\n\r\n        return {\r\n            countries: chartCountries,\r\n            years: years.reverse(),\r\n            data: chartData\r\n        }\r\n    }\r\n}\r\n\r\nexport default getGhgBySector","import React  from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highcharts3d from \"highcharts/highcharts-3d\";\r\nimport FormControl from '@mui/material/FormControl';\r\nimport {Autocomplete, TextField} from \"@mui/material\";\r\nimport useWindowDimensions from \"../../utils/useWindowDimensions\";\r\nimport getGhgBySector from \"../../data/adapter/getGhgBySector\";\r\nimport {getOptions} from \"../../options/chartOptions\";\r\nimport seriesLabel from 'highcharts/modules/series-label';\r\nimport ChartLoader from \"../ChartLoader\";\r\nimport handleCountryChange from \"../../utils/handleCountryChange\";\r\nimport handleYearChange from \"../../utils/handleYearChange\";\r\nimport ChartTypes from \"../ChartTypes\";\r\nimport sortToLowest from \"../../utils/sortToLowest\";\r\nimport ChartTitle from \"../ChartTitle\";\r\nimport ChartSources from \"../ChartSources\";\r\n\r\nseriesLabel(Highcharts);\r\nhighcharts3d(Highcharts);\r\n\r\nconst GhgEmissionsBySector = (props) => {\r\n    const [dataset, setDataset] = React.useState(null)\r\n    const [year, setYear] = React.useState('2018')\r\n    const [country, setCountry] = React.useState('Monde')\r\n    const [chart, setChart] = React.useState('area')\r\n    const {width} = useWindowDimensions();\r\n\r\n    React.useLayoutEffect(() => {\r\n        setDataset(getGhgBySector(country, year))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setDataset(getGhgBySector(country, (chart !== 'pie' ? null : year)))\r\n    }, [year, country, chart])\r\n\r\n    return (\r\n        <>\r\n            {dataset === null &&\r\n                <ChartLoader/>\r\n            }\r\n\r\n            {dataset !== null &&\r\n                <>\r\n                    <div className=\"row pb-4 pt-2 justify-content-between\">\r\n                        <div className=\"col-auto chart-related-settings\">\r\n                            <FormControl sx={{ minWidth: 200, maxWidth: 400, marginRight: 1, marginBottom: 1 }}>\r\n                                <Autocomplete\r\n                                    disableClearable\r\n                                    disablePortal\r\n                                    id=\"country-box\"\r\n                                    options={dataset.countries}\r\n                                    color={\"primary\"}\r\n                                    value={country}\r\n                                    onChange={(event, value) => handleCountryChange(value, setCountry)}\r\n                                    sx={{ width: 250 }}\r\n                                    renderInput={(params) => <TextField {...params} label={\"Pays\"} />}\r\n                                />\r\n                            </FormControl>\r\n                            {chart !== 'area' &&\r\n                                <FormControl sx={{ minWidth: 200, maxWidth: 400, marginLeft: {\r\n                                    xs: 0,\r\n                                    md: 1\r\n                                } }}>\r\n                                    <Autocomplete\r\n                                        disableClearable\r\n                                        disablePortal\r\n                                        id=\"year-box\"\r\n                                        options={dataset.years}\r\n                                        value={year}\r\n                                        onChange={(value) => handleYearChange(value, setYear)}\r\n                                        sx={{ width: 250 }}\r\n                                        renderInput={(params) => <TextField {...params} label={\"AnnÃ©e\"} />}\r\n                                    />\r\n                                </FormControl>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                            <ChartTypes chart={chart} setChart={setChart} chartTypes={['pie', 'area']}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col px-0\">\r\n                            {chart === 'pie' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{...(getOptions(chart, width)), ...{series: [{\r\n                                                type: chart,\r\n                                                data: dataset.data\r\n                                            }]}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                            {chart === 'area' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{\r\n                                        ...(getOptions(chart, width)),\r\n                                        ...{\r\n                                            xAxis: {\r\n                                                categories: [...dataset.years].reverse(),\r\n                                                tickmarkPlacement: 'on',\r\n                                                title: {\r\n                                                    enabled: false\r\n                                                }\r\n                                            },\r\n                                            yAxis: {\r\n                                                title: {\r\n                                                    text: 'MtCO2eq'\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        ...{series: dataset.data.sort(sortToLowest)}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <ChartTitle title={\"Ãmissions de GES (CO2eq) par secteur\"}/>\r\n                    <ChartSources sourcesName={\"CAIT\"} sourcesLink={\"https://www.climatewatchdata.org/data-explorer/historical-emissions\"}/>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GhgEmissionsBySector;"],"names":["countries","require","country","year","years","Object","keys","data","filter","datum","isNaN","chartCountries","Array","from","Set","Country","select","map","unshift","chartData","Gas","includes","Sector","name","formatLabels","y","toString","reverse","key","seriesLabel","Highcharts","highcharts3d","props","React","dataset","setDataset","setYear","setCountry","chart","setChart","width","useWindowDimensions","getGhgBySector","ChartLoader","className","FormControl","sx","minWidth","maxWidth","marginRight","marginBottom","Autocomplete","disableClearable","disablePortal","id","options","color","value","onChange","event","handleCountryChange","renderInput","params","TextField","label","marginLeft","xs","md","handleYearChange","ChartTypes","chartTypes","highcharts","getOptions","series","type","xAxis","categories","tickmarkPlacement","title","enabled","yAxis","text","sort","sortToLowest","ChartTitle","ChartSources","sourcesName","sourcesLink"],"sourceRoot":""}