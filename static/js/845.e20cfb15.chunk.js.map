{"version":3,"file":"static/js/845.e20cfb15.chunk.js","mappings":"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","sources":["data/adapter/getCh4EmissionsBySector.js","components/charts/Ch4EmissionsBySector.js"],"sourcesContent":["import data from \"../dataset/ch4/ch4-emissions-by-sector.json\";\r\nimport countries from \"i18n-iso-countries\";\r\ncountries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\r\ncountries.registerLocale(require(\"i18n-iso-countries/langs/fr.json\"));\r\n\r\nconst getCh4EmissionsBySector = (country, year) => {\r\n    let chartCountries = Array.from(\r\n        new Set(\r\n            (data\r\n                .filter(datum => typeof countries.getName(datum.Code, \"fr\", {select: \"official\"}) !== 'undefined')\r\n                .map(datum => countries.getName(datum.Code, \"fr\", {select: \"official\"}))\r\n            )\r\n        )\r\n    )\r\n    chartCountries.unshift('Monde')\r\n\r\n    if (country && year) {\r\n        const countryData = data.filter(datum =>\r\n            (\r\n                (countries.getName(datum.Code, \"fr\", {select: \"official\"}) === country) ||\r\n                ((country === 'Monde' && datum.Code === 'WORLD') || (country === 'Monde' && datum.Code === 'OWID_WRL'))\r\n            ) &&\r\n            parseInt(datum.Year) === parseInt(year)\r\n        )\r\n\r\n        let chartData = []\r\n\r\n        countryData.forEach(countryDatum => {\r\n            Object.keys(countryDatum).filter(key => key.includes('CAIT')).forEach(key => {\r\n                chartData.push({\r\n                    name: convertLabels(key),\r\n                    y: countryDatum[key]\r\n                })\r\n            })\r\n        })\r\n\r\n        return {\r\n            countries: chartCountries,\r\n            data: chartData,\r\n            years: countryData.map(datum => datum.Year)\r\n        }\r\n    }\r\n\r\n    if (country) {\r\n        const countryData = data.filter(datum =>\r\n            (\r\n                ((countries.getName(datum.Code, \"fr\", {select: \"official\"}) === country) ||\r\n                ((country === 'Monde' && datum.Code === 'WORLD') || (country === 'Monde' && datum.Code === 'OWID_WRL')))\r\n                &&\r\n                parseInt(datum.Year) > 1830\r\n            )\r\n        )\r\n\r\n        const years = countryData.map(datum => datum.Year)\r\n        let chartData = []\r\n\r\n        countryData.forEach(countryDatum => {\r\n            Object.keys(countryDatum).filter(key => key.includes('CAIT')).forEach(key => {\r\n                if (!chartData.find(datum => convertLabels(datum.name) === convertLabels(key))) {\r\n                    chartData.push({\r\n                        name: convertLabels(key),\r\n                        data: []\r\n                    })\r\n                }\r\n\r\n                chartData.find(datum => convertLabels(datum.name) === convertLabels(key)).data.push(countryDatum[key])\r\n            })\r\n        })\r\n\r\n        return {\r\n            countries: chartCountries,\r\n            years: years,\r\n            data: chartData\r\n        }\r\n    }\r\n}\r\n\r\nconst convertLabels = (label) => {\r\n    let convertedLabel = label.replace(' (CH4 emissions, CAIT)', '')\r\n    return  convertedLabel.charAt(0).toUpperCase() + convertedLabel.slice(1);\r\n}\r\n\r\nexport default getCh4EmissionsBySector","import React  from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highcharts3d from \"highcharts/highcharts-3d\";\r\nimport FormControl from '@mui/material/FormControl';\r\nimport {Autocomplete, TextField} from \"@mui/material\";\r\nimport useWindowDimensions from \"../../utils/useWindowDimensions\";\r\nimport {getOptions} from \"../../options/chartOptions\";\r\nimport seriesLabel from 'highcharts/modules/series-label';\r\nimport ChartLoader from \"../ChartLoader\";\r\nimport handleCountryChange from \"../../utils/handleCountryChange\";\r\nimport handleYearChange from \"../../utils/handleYearChange\";\r\nimport ChartTypes from \"../ChartTypes\";\r\nimport sortToLowest from \"../../utils/sortToLowest\";\r\nimport ChartTitle from \"../ChartTitle\";\r\nimport ChartSources from \"../ChartSources\";\r\nimport getCh4EmissionsBySector from \"../../data/adapter/getCh4EmissionsBySector\";\r\n\r\nseriesLabel(Highcharts);\r\nhighcharts3d(Highcharts);\r\n\r\nconst Ch4BySector = (props) => {\r\n    const [dataset, setDataset] = React.useState(null)\r\n    const [year, setYear] = React.useState('2016')\r\n    const [country, setCountry] = React.useState('Monde')\r\n    const [chart, setChart] = React.useState('area')\r\n    const {width} = useWindowDimensions();\r\n\r\n    React.useLayoutEffect(() => {\r\n        setDataset(getCh4EmissionsBySector(country, year))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setDataset(getCh4EmissionsBySector(country, (chart !== 'pie' ? null : year)))\r\n    }, [year, country, chart])\r\n\r\n    return (\r\n        <>\r\n            {dataset === null &&\r\n                <ChartLoader/>\r\n            }\r\n\r\n            {dataset !== null &&\r\n                <>\r\n                    <div className=\"row pb-4 pt-2 justify-content-between\">\r\n                        <div className=\"col-auto chart-related-settings\">\r\n                            <FormControl sx={{ minWidth: 200, maxWidth: 400, marginRight: 1 }}>\r\n                                <Autocomplete\r\n                                    disablePortal\r\n                                    id=\"country-box\"\r\n                                    options={dataset.countries}\r\n                                    color={\"primary\"}\r\n                                    value={country}\r\n                                    onChange={(value) => handleCountryChange(value, setCountry)}\r\n                                    sx={{ width: 250 }}\r\n                                    renderInput={(params) => <TextField {...params} label={\"Pays\"} />}\r\n                                />\r\n                            </FormControl>\r\n                            {chart !== 'area' &&\r\n                                <FormControl sx={{ minWidth: 200, maxWidth: 400, marginLeft: 1 }}>\r\n                                    <Autocomplete\r\n                                        disablePortal\r\n                                        id=\"year-box\"\r\n                                        options={dataset.years}\r\n                                        value={year}\r\n                                        onChange={(value) => handleYearChange(value, setYear)}\r\n                                        sx={{ width: 250 }}\r\n                                        renderInput={(params) => <TextField {...params} label={\"Année\"} />}\r\n                                    />\r\n                                </FormControl>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                            <ChartTypes chart={chart} setChart={setChart} chartTypes={['pie', 'area']}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {chart === 'pie' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{...(getOptions(chart, width)), ...{series: [{\r\n                                                type: chart,\r\n                                                data: dataset.data\r\n                                            }]}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                            {chart === 'area' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{\r\n                                        ...(getOptions(chart, width)),\r\n                                        ...{\r\n                                            xAxis: {\r\n                                                categories: [...dataset.years],\r\n                                                tickmarkPlacement: 'on',\r\n                                                title: {\r\n                                                    enabled: false\r\n                                                }\r\n                                            },\r\n                                            yAxis: {\r\n                                                title: {\r\n                                                    text: 'billion t'\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        ...{series: dataset.data.sort(sortToLowest)}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <ChartTitle title={\"Émissions de Méthane (CH4) par secteur\"}/>\r\n                    <ChartSources sourcesName={\"CAIT\"} sourcesLink={\"https://www.climatewatchdata.org/data-explorer/historical-emissions\"}/>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ch4BySector;"],"names":["countries","require","convertLabels","label","convertedLabel","replace","charAt","toUpperCase","slice","country","year","chartCountries","Array","from","Set","data","datum","Code","select","map","unshift","countryData","parseInt","Year","chartData","forEach","countryDatum","Object","keys","filter","key","includes","push","name","y","years","find","seriesLabel","Highcharts","highcharts3d","props","React","dataset","setDataset","setYear","setCountry","chart","setChart","width","useWindowDimensions","getCh4EmissionsBySector","ChartLoader","className","FormControl","sx","minWidth","maxWidth","marginRight","Autocomplete","disablePortal","id","options","color","value","onChange","handleCountryChange","renderInput","params","TextField","marginLeft","handleYearChange","ChartTypes","chartTypes","highcharts","getOptions","series","type","xAxis","categories","tickmarkPlacement","title","enabled","yAxis","text","sort","sortToLowest","ChartTitle","ChartSources","sourcesName","sourcesLink"],"sourceRoot":""}