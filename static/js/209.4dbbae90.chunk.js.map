{"version":3,"file":"static/js/209.4dbbae90.chunk.js","mappings":"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","sources":["data/adapter/getCo2ByFuel.js","components/charts/Co2ByFuel.js"],"sourcesContent":["import data from \"../dataset/co2/co2-by-source-1830.json\";\r\nimport defaultOwidAdapter from \"./owid/defaultOwidAdapter\";\r\n\r\nconst getCo2ByFuel = (country, year) => {\r\n    return defaultOwidAdapter(data, country, year, (key) => key.includes('Annual'))\r\n}\r\n\r\nexport default getCo2ByFuel","import React  from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highcharts3d from \"highcharts/highcharts-3d\";\r\nimport FormControl from '@mui/material/FormControl';\r\nimport {Autocomplete, TextField} from \"@mui/material\";\r\nimport useWindowDimensions from \"../../utils/useWindowDimensions\";\r\nimport {getOptions} from \"../../options/chartOptions\";\r\nimport seriesLabel from 'highcharts/modules/series-label';\r\nimport getCo2ByFuel from \"../../data/adapter/getCo2ByFuel\";\r\nimport ChartLoader from \"../ChartLoader\";\r\nimport handleCountryChange from \"../../utils/handleCountryChange\";\r\nimport handleYearChange from \"../../utils/handleYearChange\";\r\nimport ChartTitle from \"../ChartTitle\";\r\nimport ChartSources from \"../ChartSources\";\r\nimport sortToLowest from \"../../utils/sortToLowest\";\r\nimport ChartTypes from \"../ChartTypes\";\r\nimport getCountryLabel from \"../../utils/getCountryLabel\";\r\n\r\nseriesLabel(Highcharts);\r\nhighcharts3d(Highcharts);\r\n\r\nconst Co2ByFuel = (props) => {\r\n    const [dataset, setDataset] = React.useState(null)\r\n    const [year, setYear] = React.useState('2020')\r\n    const [country, setCountry] = React.useState('World')\r\n    const [chart, setChart] = React.useState('area')\r\n    const {width} = useWindowDimensions();\r\n\r\n    React.useLayoutEffect(() => {\r\n        setDataset(getCo2ByFuel(country, year))\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        setDataset(getCo2ByFuel(country, (chart !== 'pie' ? null : year)))\r\n    }, [year, country, chart])\r\n\r\n    return (\r\n        <>\r\n            {dataset === null &&\r\n                <ChartLoader/>\r\n            }\r\n\r\n            {dataset !== null &&\r\n                <>\r\n                    <div className=\"row pb-4 pt-2 justify-content-between\">\r\n                        <div className=\"col-auto chart-related-settings\">\r\n                            <FormControl sx={{ minWidth: 200, maxWidth: 400, marginRight: 1 }}>\r\n                                <Autocomplete\r\n                                    disableClearable\r\n                                    disablePortal\r\n                                    id=\"country-box\"\r\n                                    options={dataset.countries.sort((a, b) => -getCountryLabel(b).charAt(0).localeCompare(getCountryLabel(a).charAt(0)))}\r\n                                    color={\"primary\"}\r\n                                    value={country}\r\n                                    getOptionLabel={(option) => getCountryLabel(option)}\r\n                                    onChange={(event, value) => handleCountryChange(value, setCountry)}\r\n                                    sx={{ width: 250 }}\r\n                                    renderInput={(params) => <TextField {...params} label={\"Pays\"} />}\r\n                                />\r\n                            </FormControl>\r\n                            {chart !== 'area' &&\r\n                                <FormControl sx={{ minWidth: 200, maxWidth: 400, marginLeft: 1 }}>\r\n                                    <Autocomplete\r\n                                        disableClearable\r\n                                        disablePortal\r\n                                        id=\"year-box\"\r\n                                        options={dataset.years}\r\n                                        value={year}\r\n                                        getOptionLabel={(option) => option.toString()}\r\n                                        onChange={(value) => handleYearChange(value, setYear)}\r\n                                        sx={{ width: 250 }}\r\n                                        renderInput={(params) => <TextField {...params} label={\"Année\"} />}\r\n                                    />\r\n                                </FormControl>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                            <ChartTypes chart={chart} setChart={setChart} chartTypes={['pie', 'area']}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            {chart === 'pie' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{...(getOptions(chart, width)), ...{series: [{\r\n                                                type: chart,\r\n                                                data: dataset.data\r\n                                            }]}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                            {chart === 'area' &&\r\n                                <HighchartsReact\r\n                                    highcharts={Highcharts}\r\n                                    options={{\r\n                                        ...(getOptions(chart, width)),\r\n                                        ...{\r\n                                            xAxis: {\r\n                                                categories: dataset.years,\r\n                                                tickmarkPlacement: 'on',\r\n                                                title: {\r\n                                                    enabled: false\r\n                                                }\r\n                                            },\r\n                                            yAxis: {\r\n                                                title: {\r\n                                                    text: 'MtCO2eq'\r\n                                                },\r\n                                            },\r\n                                        },\r\n                                        ...{series: dataset.data.sort(sortToLowest)}}}\r\n                                    {...props}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <ChartTitle title={\"Émissions de CO2 par source\"}/>\r\n                    <ChartSources sourcesLink={\"https://ourworldindata.org/emissions-by-fuel\"} sourcesName={\"OWID\"}/>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Co2ByFuel;"],"names":["country","year","defaultOwidAdapter","data","key","includes","seriesLabel","Highcharts","highcharts3d","props","React","dataset","setDataset","setYear","setCountry","chart","setChart","width","useWindowDimensions","getCo2ByFuel","ChartLoader","className","FormControl","sx","minWidth","maxWidth","marginRight","Autocomplete","disableClearable","disablePortal","id","options","countries","sort","a","b","getCountryLabel","charAt","localeCompare","color","value","getOptionLabel","option","onChange","event","handleCountryChange","renderInput","params","TextField","label","marginLeft","years","toString","handleYearChange","ChartTypes","chartTypes","highcharts","getOptions","series","type","xAxis","categories","tickmarkPlacement","title","enabled","yAxis","text","sortToLowest","ChartTitle","ChartSources","sourcesLink","sourcesName"],"sourceRoot":""}